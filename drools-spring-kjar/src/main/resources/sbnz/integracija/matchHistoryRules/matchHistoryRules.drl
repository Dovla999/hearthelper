package sbnz.integracija;

import sbnz.integracija.backend.facts.*;
import sbnz.integracija.backend.dto.*;
import java.util.*

import accumulate sbnz.integracija.backend.drools.EnemyHeroOrDeckCategoryCountAccumulateFunction enemyHeroOrDeckCategoryCountAccumulateFunction;
import accumulate sbnz.integracija.backend.drools.KeyWithMaxValueInMapAccumulateFunction keyWithMaxValueInMapAccumulateFunction;
import accumulate sbnz.integracija.backend.drools.WinsAgainstThisHeroCountAccumulateFunction winsAgainstThisHeroCountAccumulateFunction;
import accumulate sbnz.integracija.backend.drools.EnemyCenterpieceCardCountAccumulateFunction enemyCenterpieceCardCountAccumulateFunction;
import accumulate sbnz.integracija.backend.drools.WinsAgainstThisCenterpieceCardCountAccumulateFunction winsAgainstThisCenterpieceCardCountAccumulateFunction

function boolean debug(String x) {
    System.out.println("lhs_debug(): "+x);
    return true;
}

rule "Most frequent enemy hero"
    salience 3
    dialect "mvel"
    when
        $u: User( $pmh: personalMatchHistory )
//        $countMap: Map() from accumulate(
//            Match( $hero: secondPlayer ) from $pmh,
//            init( Map enemyHeroCount = new HashMap(); ),
//            action( if (enemyHeroCount.containsKey($hero)) enemyHeroCount.put($hero, ((Integer)enemyHeroCount.get($hero)) + 1);
//                    else enemyHeroCount.put($hero, 1); ),
//            result( enemyHeroCount )
//        )
        accumulate(
            Match( $hero: secondPlayer ) from $pmh,
            $countMap: enemyHeroOrDeckCategoryCountAccumulateFunction( $hero )
        )
//        $mostFreq: Hero() from accumulate(
//            Map.Entry( $key: key, $val: value ) from $countMap.entrySet(),
//            init( Hero mostFrequentHero = null; ),
//            action( if (mostFrequentHero == null || ((Integer)$val) > ((Integer)$countMap.get(mostFrequentHero))) mostFrequentHero = (Hero)$key; ),
//            result( mostFrequentHero )
//        )
        accumulate(
            Map.Entry( $key: key, $val: value ) from $countMap.entrySet(),
            $mostFreq: keyWithMaxValueInMapAccumulateFunction( ["key" : (Object)$key, "val" : (Object)$val, "map" : (Object)$countMap] )
        )
    then
        System.out.println(((Hero) $mostFreq).name());
        System.out.println("HURAAA!");
        insert( $mostFreq );
end

rule "Most successful opposing hero (all matches in knowledge base taken into account)"
    salience 2
    dialect "mvel"
    when
        $mostFreqHero: Hero()
//        $winsAgainstThisHero: Map() from accumulate(
//            Match( $firstPlayer: firstPlayer, $secondPlayer: secondPlayer, $firstWon: firstPlayerWon ),
//            init( Map map = new HashMap(); ),
//            action( if ($firstPlayer == $mostFreqHero && !$firstWon) {
//                        if (map.containsKey($secondPlayer)) map.put($secondPlayer, ((Integer)map.get($secondPlayer)) + 1);
//                        else map.put($secondPlayer, 1);
//                   } else if ($secondPlayer == $mostFreqHero && $firstWon) {
//                        if (map.containsKey($firstPlayer)) map.put($firstPlayer, ((Integer)map.get($firstPlayer)) + 1);
//                        else map.put($firstPlayer, 1);
//                   } ),
//            result( map )
//        )
        accumulate(
            Match( $firstPlayer: firstPlayer, $secondPlayer: secondPlayer, $firstWon: firstPlayerWon ),
            $winsAgainstThisHero: winsAgainstThisHeroCountAccumulateFunction(
                ["firstPlayer" : (Object)$firstPlayer, "secondPlayer" : (Object)$secondPlayer, "firstWon" : (Object)$firstWon, "mostFreqHero" : (Object)$mostFreqHero]
            )
        )
        accumulate(
            Map.Entry( $key: key, $val: value ) from $winsAgainstThisHero.entrySet(),
            $mostSuccessfulHero: keyWithMaxValueInMapAccumulateFunction( ["key" : (Object)$key, "val" : (Object)$val, "map" : (Object)$winsAgainstThisHero] )
        )
        $output: MatchHistoryOutputDTO()
    then
        System.out.println("hi from 2nd rule!");
        System.out.println(((Hero) $mostSuccessfulHero).name());
        $output.setHero((Hero) $mostSuccessfulHero);
end


rule "Most frequently played enemy centerpiece card"
    salience 3
    dialect "mvel"
    when
        $u: User( $pmh: personalMatchHistory )
//        $countMap: Map() from accumulate(
//            Match( $enemyCards: cardsPlayedSecondPlayer ) from $pmh,
//            init( Map enemyCenterpieceCount = new HashMap(); ),
//            action( for (Card card : (List<Card>)$enemyCards) {
//                        if (card.getCenterpiece()) {
//                            if (enemyCenterpieceCount.containsKey(card)) enemyCenterpieceCount.put(card, ((Integer)enemyCenterpieceCount.get(card)) + 1);
//                            else enemyCenterpieceCount.put(card, 1);
//                        }
//                    } ),
//            result( enemyCenterpieceCount )
//        )
        accumulate(
            Match( $enemyCards: cardsPlayedSecondPlayer ) from $pmh,
            $countMap: enemyCenterpieceCardCountAccumulateFunction( $enemyCards )
        )
//        $mostFreq: Card() from accumulate(
//            Map.Entry( $key: key, $val: value ) from $countMap.entrySet(),
//            init( Card mostFrequent = null; ),
//            action( if (mostFrequent == null || ((Integer)$val) > ((Integer)$countMap.get(mostFrequent))) mostFrequent = (Card)$key; /*System.out.println(((Card)$key).getName() + " freq: " + ((Integer)$val));*/ ),
//            result( mostFrequent )
//        )
        accumulate(
            Map.Entry( $key: key, $val: value ) from $countMap.entrySet(),
            $mostFreq: keyWithMaxValueInMapAccumulateFunction( ["key" : (Object)$key, "val" : (Object)$val, "map" : (Object)$countMap] )
        )
    then
        System.out.println("Konacno: " + ((Card) $mostFreq).getName());
        System.out.println("HURAAA CENTERPIECE!");
        insert( $mostFreq );
end

rule "Most successful opposing centerpiece card (all matches in knowledge base taken into account)"
    salience 2
    dialect "mvel"
    when
        $mostFreqCenterpiece: Card()
//        $winsAgainstThisCard: Map() from accumulate(
//            Match( $firstPlayerCards: cardsPlayedFirstPlayer, $secondPlayerCards: cardsPlayedSecondPlayer, $firstWon: firstPlayerWon ),
//            init( Map map = new HashMap(); ),
//            action( List cards = null;
//                    boolean mostFreqCenterpieceLost = true;
//                    if ($firstWon) {
//                        cards = $firstPlayerCards;
//                        if (!$secondPlayerCards.contains($mostFreqCenterpiece)) mostFreqCenterpieceLost = false;
//                    }
//                    else {
//                        cards = $secondPlayerCards;
//                        if (!$firstPlayerCards.contains($mostFreqCenterpiece)) mostFreqCenterpieceLost = false;
//                    }
//                    if (mostFreqCenterpieceLost) {
//                        for (Card card : (List<Card>)cards) {
//                            if (card.getCenterpiece()) {
//                                if (map.containsKey(card)) map.put(card, ((Integer)map.get(card)) + 1);
//                                else map.put(card, 1);
//                            }
//                        }
//                    } ),
//            result( map )
//        )
        accumulate(
            Match( $firstPlayerCards: cardsPlayedFirstPlayer, $secondPlayerCards: cardsPlayedSecondPlayer, $firstWon: firstPlayerWon ),
            $winsAgainstThisCard: winsAgainstThisCenterpieceCardCountAccumulateFunction(
                ["firstPlayerCards" : (Object)$firstPlayerCards, "secondPlayerCards" : (Object)$secondPlayerCards, "firstWon" : (Object)$firstWon, "mostFreqCenterpiece" : (Object)$mostFreqCenterpiece]
            )
        )
//        $mostSuccessfulCenterpiece: Card() from accumulate(
//            Map.Entry( $key: key, $val: value ) from $winsAgainstThisCard.entrySet(),
//            init( Card mostFrequent = null; ),
//            action( if (mostFrequent == null || ((Integer)$val) > ((Integer)$winsAgainstThisCard.get(mostFrequent))) mostFrequent = (Card)$key; System.out.println(((Card)$key).getName() + " freq: " + ((Integer)$val)); ),
//            result( mostFrequent )
//        )
        accumulate(
            Map.Entry( $key: key, $val: value ) from $winsAgainstThisCard.entrySet(),
            $mostSuccessfulCenterpiece: keyWithMaxValueInMapAccumulateFunction( ["key" : (Object)$key, "val" : (Object)$val, "map" : (Object)$winsAgainstThisCard] )
        )
        $output: MatchHistoryOutputDTO()
    then
        System.out.println("hi from 4th rule!");
        System.out.println(((Card) $mostSuccessfulCenterpiece).getName());
        $output.setCenterpieceCard((Card) $mostSuccessfulCenterpiece);
end